%% OPTIMIZATION PARAMS
% Aff = 66.04; % Initialize acceleration gain
speed = 300;
step_sizes = logspace(-3,1.2,30);
AffValues = 0:.5:80;
epsilon_settled = .05;
epsilon_converged = .01;

%% SETUP CONTROLLER
CTLR = Controller([0],300);

% try

%% SETUP
samplePeriod = 1; % in ms
n_vals = length(AffValues);
n_steps = length(step_sizes);
ErrorData = zeros(n_vals*n_steps,3); 
OptParams = zeros(n_steps,1);
GAINAFF = A3200

%% TEST LOOP

close all % Close previous figure
f1 = figure(1);
f1.Position = [200 200 900 600];
% axis([min(testValues) max(testValues) 0 0.009]); % Want it dynamically adjusting

for i = 1:length(step_sizes)
    step = step_sizes(i);
    figure(f1);
    step_time = step / speed; % Earliest time before finishing step
    h = animatedline; % New line for a new step size
    h.Color = [mod(step*43.419,1) mod(step*63.713,1) mod((step*29.301),1)];
    f2 = figure(i+2);

    % Change number of samples
    sampleCount = round(1.7*step_time/(.001*samplePeriod)) + 7 + 120;
    CTLR = CTLR.SetDataColLength(sampleCount,samplePeriod);
%     stepErrorHist = zeros(n_vals,sampleCount);
    

    for iter = 1:length(AffValues)
        gain = AffValues(iter); %TODO, turn into helper function

        % Update Parameter
        A3200ParameterSetValue(CTLR.handle,GAINAFF,0,gain);
        [posData,velData,refData] = CTLR.TestGain(step);
        settleInd = abs(refData - step) < epsilon_settled*step;
    
        % Compile error
        stepError = rmse(posData(settleInd), refData(settleInd));

        % Plot
        figure(f1);
        disp(['Error = ', num2str(stepError)]);
        addpoints(h,gain,stepError);
        drawnow
        figure(f2);
        plotResponse(f2, posData,velData,refData,'b');

        % Save Data
        ErrorData(iter+(i-1)*n_vals,:) = [step, gain, stepError];
%         stepErrorHist(iter,:) = posData;
    end
    
    % Find minimum error for step
    f = fit(ErrorData((i-1)*n_vals+1:i*n_vals,2), ErrorData((i-1)*n_vals+1:i*n_vals,3),'Fourier8');
    xsample = min(AffValues):.005:max(AffValues);
    yfit = f(xsample);
    [miny, minI] = min(yfit);
    OptParams(i) = xsample(minI);
    disp(['Optimum Parameter for step ', num2str(step), ': ', num2str(OptParams(i))]);

%     % Test and plot response with optimal parameter
%     [posData,velData,refData] = testGain(handle,dataCollHandle,sampleCount,axes,step,speed,OptParams(i));
%     plotResponse(f2, posData,velData,refData,'g');
end
hold off;
%% Plot Response Data

% Create labels and format plot
figure(f1)
units = 'mm step';
labels = cell(size(step_sizes));
for i = 1:length(step_sizes)
    labels{i} = [num2str(step_sizes(i)), units];
end
legend(labels, 'Location','eastoutside');
title('Error vs Aff Gain');
xlabel('Aff Gain');
ylabel('RMS Error');

%% Plot Optimization Data

f3 = figure(2);
semilogx(step_sizes, OptParams);
title('Optimum Gains vs. Step Size');
ylabel('Optimum Aff Gain');
xlabel('Step Size (mm)');

%% Save Data

% Save Data
Data = table(ErrorData(:,1), ErrorData(:,2), ErrorData(:,3), 'VariableNames', {'Step', 'Gain', 'Step_Error'});
writematrix(ErrorData,'Results/DataSamples.csv');
writematrix(OptParams,'Results/OptParams.csv');
save('Results/DataSamples.mat', 'Data');
save('Results/OptimumGains.mat', 'OptParams');
saveas(f1,'Results/Aff Error.png');
saveas(f3,'Results/Optimization Curve.png');


% %% Free Controller Handles
% disp('SUCCESS');
% CTLR.Free;
% 
% catch ME
%     disp('FAILURE');
%     CTLR.Free;
%     rethrow(ME);
% end